name: main_workflow

on:
  push:
    branches:
      - main  # Este job se ejecutará cada vez que haya un push en la rama principal

jobs:
  Linter_job:
    runs-on: ubuntu-latest  # Utilizamos Ubuntu para ejecutar el job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Realiza el checkout del código fuente

      - name: Set up Node.js
        uses: actions/setup-node@v2  # Configura Node.js en el entorno
        with:
          node-version: '16'  # Utiliza la versión que prefieras

      - name: Install dependencies
        run: npm install  # Instala las dependencias del proyecto

      - name: Run linter
        run: npm run lint || exit 1  # Ejecuta el linter y detiene el flujo si hay errores

  Cypress_job:
    runs-on: ubuntu-latest  # Utilizamos Ubuntu para ejecutar el job
    needs: Linter_job  # El job de Cypress se ejecutará después del job de Linter
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Realiza el checkout del código fuente

      - name: Set up Node.js
        uses: actions/setup-node@v2  # Configura Node.js en el entorno
        with:
          node-version: '16'  # Utiliza la versión que prefieras

      - name: Install dependencies
        run: npm install  # Instala las dependencias del proyecto

      - name: Run Cypress tests
        run: npm run cypress || true  # Ejecuta los tests de Cypress y continúa aunque haya errores
        continue-on-error: true  # Continúa incluso si los tests fallan

      - name: Upload Cypress results as artifact
        uses: actions/upload-artifact@v3  # Usamos la nueva versión (v3) de la acción para subir artefactos
        with:
          name: cypress-results  # Nombre del artefacto
          path: cypress/results/results.txt # Ruta al archivo de resultados

    Add_badge_job:
    runs-on: ubuntu-latest
    needs: Cypress_job  # Este job se ejecutará después del Cypress_job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Cypress results artifact
        uses: actions/download-artifact@v3
        with:
          name: cypress-results

      - name: Read Cypress result
        id: cypress-result
        run: |
          result=$(cat cypress/results/results.txt)
          echo "cypress_outcome=${result}" >> $GITHUB_ENV  # Guardamos el resultado como una variable de entorno

      # Este es el paso donde forzamos el agregar el archivo results.txt
      - name: Force add results.txt
        run: |
          git add --force cypress/results/results.txt  # Forzar la inclusión del archivo
          git add README.md  # Asegúrate de incluir también README.md si es necesario

      - name: Commit changes to README
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -m "Add Cypress test badge"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Deploy_job:
    runs-on: ubuntu-latest
    needs: Cypress_job  # Este job se ejecutará después del Cypress_job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Realiza el checkout del código fuente

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20  # Acción para desplegar el proyecto en Vercel
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}  # Token de autenticación de Vercel
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}  # ID de la organización en Vercel (si aplica)
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}  # ID del proyecto en Vercel
          vercel-args: '--prod'  # Desplegar en producción (puedes cambiarlo a '--preview' si prefieres)

  Notification_job:
    runs-on: ubuntu-latest
    needs: [Linter_job, Cypress_job, Add_badge_job, Deploy_job]  # Asegurarse de que se ejecute después de los jobs anteriores
    if: always()  # Esto garantiza que el job se ejecute siempre
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Send notification email
        run: |
          # Obtener los resultados de los trabajos anteriores
          result_linter="${{ job.status }}"
          result_cypress="${{ needs.Cypress_job.result }}"
          result_add_badge="${{ needs.Add_badge_job.result }}"
          result_deploy="${{ needs.Deploy_job.result }}"

          # Crear el mensaje del correo
          subject="Resultado del workflow ejecutado"
          body="S'ha realitzat un push en la branca main que ha provocat l'execució del workflow nom_repositori_workflow amb els següents resultats:

          - linter_job: $result_linter
          - cypress_job: $result_cypress
          - add_badge_job: $result_add_badge
          - deploy_job: $result_deploy"

          # Usar Node.js para enviar el correo
          node -e "
          const nodemailer = require('nodemailer');
          const transporter = nodemailer.createTransport({
            service: 'gmail',  # Usar el servicio de correo adecuado
            auth: {
              user: '${{ secrets.USER_EMAIL }}',
              pass: '${{ secrets.EMAIL_PASSWORD }}',  # La contraseña se debe proporcionar como secreto
            }
          });

          const mailOptions = {
            from: '${{ secrets.USER_EMAIL }}',
            to: '${{ secrets.USER_EMAIL }}',  # El correo que recibirás
            subject: '$subject',
            text: '$body',  # Mensaje del correo
          };

          transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
              console.log('Error:', error);
            } else {
              console.log('Email sent: ' + info.response);
            }
          });
          "
